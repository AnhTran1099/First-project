$(document).ready(function() {
	
	// Show products list when opening page
	findAllProducts(1);

	// Show products list when clicking pagination button
	$('.pagination').on('click', '.page-link', function() {
		var pagerNumber = $(this).attr("data-index");
		findAllProducts(pagerNumber);
	})

	var $productInfoForm = $('#productInfoForm');
	var $productInfoModal = $('#productInfoModal');

	// Show add product modal
	$('#addProductInfoModal').on('click', function() {
		resetFormModal($productInfoForm);
		showModalWithCustomizedTitle($productInfoModal, "Add Product");
		$('#productImg img').attr('src', '/images/image-demo.png');
		$('#productId').closest(".form-group").addClass("d-none");
		$("#productImage .required-mask").removeClass("d-none");
	});

	// Show update product modal
	$("#productInfoTable").on('click', '.edit-btn', function() {

		$("#productImage .required-mask").addClass("d-none");

		// Get product info by product ID
		$.ajax({
			url : "/product/api/find?id=" + $(this).data("id"),
			type : 'GET',
			dataType : 'json',
			contentType : 'application/json',
			success : function(responseData) {
				if (responseData.responseCode == 100) {
					var productInfo = responseData.data;
					resetFormModal($productInfoForm);
					showModalWithCustomizedTitle($productInfoModal, "Edit Product");

					$('#productId').val(productInfo.productId);
					$('#productName').val(productInfo.productName);
					$('#quantity').val(productInfo.quantity);
					$('#price').val(productInfo.price);
					$('#brandName').val(productInfo.brandName);
					$('#saleDate').val(productInfo.saleDate);
					var productImage = productInfo.image;
					if (productImage == null || productImage == "") {
						productImage = "/images/image-demo.png";
					}
					$("#productImg img").attr("src", productImage);
					$("#image").val(productImage);
					$('#productId').closest(".form-group").removeClass("d-none");
				}
			}
		});
	});

	// Show delete product confirmation modal
	$("#productInfoTable").on('click', '.delete-btn', function() {
		$("#deletedProductName").text($(this).data("name"));
		$("#deleteSubmitBtn").attr("data-id", $(this).data("id"));
		$('#confirmDeleteModal').modal('show');
	});

	// Submit delete product
	$("#deleteSubmitBtn").on('click' , function() {
		$.ajax({
			url : "/product/api/delete/" + $(this).attr("data-id"),
			type : 'DELETE',
			dataType : 'json',
			contentType : 'application/json',
			success : function(responseData) {
				$('#confirmDeleteModal').modal('hide');
				showNotification(responseData.responseCode == 100, responseData.responseMsg);
				findAllProducts(1);
			}
		});
	});

	// Submit add and update product
	$('#saveProductBtn').on('click', function (event) {

		event.preventDefault();
		var formData = new FormData($productInfoForm[0]);
		var productId = formData.get("productId");
		var isAddAction = productId == undefined || productId == "";
	
		$productInfoForm.validate({
			ignore: [],
			rules: {
				productName: {
					required: true,
					maxlength: 100
				},
				imageFiles: {
					required: isAddAction,
				}
			},
			messages: {
				productName: {
					required: "Please input Product Name",
					maxlength: "The Product Name must be less than 100 characters",
				},
				quantity: {
					required: "Please input Quantity",
					maxlength: "The Quantity must be less than 100 characters",
				},
				price: {
					required: "Please input Price",
					maxlength: "The Price must be less than 100 characters",
				},
				saleDate: {
					required: "Please input Opening",
					maxlength: "The Product Name must be less than 100 characters",
				},
				imageFiles: {
					required: "Please upload Product Image",
				}
			},
			errorElement: "div",
			errorClass: "error-message-invalid"
		});

		if ($productInfoForm.valid()) {

			// POST data to server-side by AJAX
			$.ajax({
				url: "/product/api/" + (isAddAction ? "add" : "update"),
				type: 'POST',
				enctype: 'multipart/form-data',
				processData: false,
				contentType: false,
				cache: false,
				timeout: 10000,
				data: formData,
				success: function(responseData) {

					// Hide modal and show success message when save successfully
					// Else show error message in modal
					if (responseData.responseCode == 100) {
						$productInfoModal.modal('hide');
						findAllProducts(1);
						showNotification(true, responseData.responseMsg);
					} else {
						showMsgOnField($productInfoForm.find("#productName"), responseData.responseMsg);
					}
				}
			});
		}
	});
	$('#datepicker').jSunPicker({

		
		language:'en-US',
		  daysTitle: ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'],
		  monthsTitle: ['January','February','March','April','May','June','July','August','September','October','November','December'],
		  // number of characters
		  dayShort: 2,            
		  // number of characters      
		  monthShort: 3,       
		  // path/to/calendar/icon, trigger picker on clicking the icon      
		  showIcon:null,   
		  // '#element-id',   | jQuery selector for the inline container - be sure to give a unique one
		  inline:null,   
		  // Sunday = 1, Saturday = 7 
		  startDay: 1,               
		  //  Available types: datetime (date+month+year+time), date, month, year, time - set the appropriate formats below   
		  pickerType:'datetime',   
		  // translates to: Sunday, February 1, 1903 23:09:59  | default format: Y/m/d h:m:s  //     
		  displayFormat:'W, T d, Y H:N:S A',    
		  // translates to: 9-2-1975    |  default format: U
		  // The following denotes the date and time notations for this script. Mix with the separators for your desired format
		  // y - two digit year, Y - four digit year, m - month number without leading zero, M - month number with leading zero
		  // t - month short text, T - month long text, d - date number without leading zero, D - date number with leading zero
		  // h - hours without leading zero, H - hours with leading zero, a - meridian (am/pm), A - meridian (AM?PM)
		  // n - minutes without leading zero, N - minutes with leading zero, s - seconds without leading zero,U - unix time
		  // S - seconds with leading zero, w - day of the week short (dayShort), W - day of the week long, X - military time 
		  outputFormat:'U',  
		  //  '2016/03/03', | '[date-string]'  in any text format except date first (not like d-m-y or d/mmm/yyyy)      
		  minDate:null,         
		  //  '2016/03/23', | same as minDate       
		  maxDate:null,            
		  //  '4:23:45 AM', | '[time-string]' in text format (like 4:23:45 PM)    
		  minTime:null,      
		  //  '4:23:45 PM', | same as minTime  
		  maxTime:null,         
		  //  '1,7' | Sun = 1, Sat = 7
		  disabledDays:null,       
		  //  individual dates or date ranges separated by commas '2016/03/05,2016/03/10-2016/03/15'   
		  disabledDates:null, 
		  //  '2016/3/14 12:21:23 PM',
		  initialDate:null,             
		  // triggered when jsunpicker pops up
		  onShow: $.noop,  
		  // triggered after jsunpicker is closed (destroyed)
		  onClose: $.noop, 
		  // triggered when a date is selected
		  onSelect: $.noop 
		});

});

function findAllProducts(pagerNumber) {
	$.ajax({
		url : "/product/api/findAll/" + pagerNumber,
		type : 'GET',
		dataType : 'json',
		contentType : 'application/json',
		success : function(responseData) {
			if (responseData.responseCode == 100) {
				renderProductsTable(responseData.data.productsList);
				renderPagination(responseData.data.paginationInfo);
			}
		}
	});
}

function renderProductsTable(productsList) {

	var rowHtml = "";
	$("#productInfoTable tbody").empty();
	$.each(productsList, function(key, value) {
		rowHtml = "<tr>"
				+		"<td>" + value.productId + "</td>"
				+		"<td>" + value.productName + "</td>"
				+		"<td>" + value.quantity + "</td>"
				+		"<td>" + value.price + "</td>"
				+		"<td>" + value.brandEntity + "</td>"
				+		"<td>" + value.saleDate + "</td>"
				+		"<td class='text-center'><a href='" + value.image + "' data-toggle='lightbox' data-max-width='1000'><img class='img-fluid' src='" + value.image + "'></td>"
				+		"<td class='action-btns'>"
				+			"<a class='edit-btn' data-id='" + value.productId + "'><i class='fas fa-edit'></i></a> | <a class='delete-btn' data-name='" + value.productName + "' data-id='" + value.productId + "'><i class='fas fa-trash-alt'></i></a>"
				+		"</td>"
				+	"</tr>";
		$("#productInfoTable tbody").append(rowHtml);
	});
}

function renderPagination(paginationInfo) {

	var paginationInnerHtml = "";
	if (paginationInfo.pageNumberList.length > 0) {
		$("ul.pagination").empty();
		paginationInnerHtml += '<li class="page-item"><a class="page-link ' + (paginationInfo.firstPage == 0 ? 'disabled' : '') + '" href="javascript:void(0)" data-index="'+ paginationInfo.firstPage + '">First</a></li>'
		paginationInnerHtml += '<li class="page-item"><a class="page-link ' + (paginationInfo.previousPage == 0 ? 'disabled' : '') + '" href="javascript:void(0)" data-index="'+ paginationInfo.previousPage + '"> < </a></li>'
		$.each(paginationInfo.pageNumberList, function(key, value) {
			paginationInnerHtml += '<li class="page-item"><a class="page-link '+ (value == paginationInfo.currentPage ? 'active' : '') +'" href="javascript:void(0)" data-index="' + value +'">' + value + '</a></li>';
		});
		paginationInnerHtml += '<li class="page-item"><a class="page-link ' + (paginationInfo.nextPage == 0 ? 'disabled' : '') + '" href="javascript:void(0)" data-index="'+ paginationInfo.nextPage + '"> > </a></li>'
		paginationInnerHtml += '<li class="page-item"><a class="page-link ' + (paginationInfo.lastPage == 0 ? 'disabled' : '') + '" href="javascript:void(0)" data-index="'+ paginationInfo.lastPage + '">Last</a></li>'
		$("ul.pagination").append(paginationInnerHtml);
	}
}